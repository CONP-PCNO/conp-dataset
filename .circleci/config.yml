version: 2

aliases:
  - &docker
    - image: mathdugre/ci-conp-dataset:py39

  - &workdir ~/conp-dataset

  - &aggregate_python_requirements
    run:
      name: Aggregate Python requirements files
      command: |
        touch all_requirements.txt
        find . -name requirements.txt | grep -v all_requirements.txt | xargs cat >> all_requirements.txt
        sort -u all_requirements.txt  > requirements.txt

  - &restore_python_cache
    restore_cache:
      name: Restore Python Cache
      keys:
        - py39-deps-{{ checksum "requirements.txt" }}
        - py39-deps-

jobs:
  build:
    working_directory: *workdir
    docker: *docker

    steps:
      - checkout:
          path: *workdir
      - *aggregate_python_requirements
      - *restore_python_cache
      - run:
          name: Install Dependencies
          command: |
            python -m venv ~/venv
            . ~/venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - save_cache:
          name: Save Python Cache
          paths:
            - ~/venv
          key: py39-deps-{{ checksum "requirements.txt" }}
      - run:
          name: Install CONP-DATS Validator
          command: |
            . ~/venv/bin/activate
            export PATH=~/git-annex.linux:$PATH
            datalad install scripts/dats_validator/conp-dats
      - persist_to_workspace:
          root: *workdir
          paths:
            - scripts/dats_validator/conp-dats

  test:
    working_directory: *workdir
    docker: *docker
    parallelism: 2

    steps:
      - checkout:
          path: *workdir
      - attach_workspace:
          at: *workdir
      - *aggregate_python_requirements
      - *restore_python_cache
      - run:
          name: Run Tests
          command: |
            . ~/venv/bin/activate
            export PATH=~/git-annex.linux:$PATH
            python tests/create_tests.py
            circleci tests glob tests/test_* | circleci tests split > /tmp/tests-to-run
            PYTHONPATH=$PWD:$PWD/scripts pytest --junitxml=tests/junit.xml -v -rfEs $(cat /tmp/tests-to-run)
      - store_test_results:
          path: tests
      - run:
          when: always
          name: Parse Test Results
          command: |
            . ~/venv/bin/activate
            PYTHONPATH=$PWD:$PWD/scripts python tests/parse_results.py
      - store_artifacts:
          path: tests/test-status.json

workflows:
  version: 2
  commit:
    jobs:
      - build
      - test:
          requires:
            - build

  monitoring:
    triggers:
      - schedule:
          cron: "0 0,4,8,12,16,20 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - test:
          requires:
            - build
